{"version":3,"sources":["Components/ListItem.js","Components/addToList.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","list","rmFromList","listOfThings","length","map","things","className","key","priority","onClick","memo","AddToList","state","handleChange","e","console","log","setState","target","id","value","handleSubmit","preventDefault","props","addToList","onSubmit","this","type","step","min","max","placeholder","onChange","maxLength","Component","App","newItem","rmList","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iOA0BeA,G,MAxBE,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WAGfC,EAAeF,EAAKG,OACtBH,EAAKI,KAAI,SAAAC,GACL,OACA,yBAAKC,UAAU,YAAYC,IAAKF,EAAOG,UACpC,yBAAKC,QAAS,WAAOR,EAAWI,EAAOG,YAAvC,IAAoD,2BAAIH,EAAOG,UAA/D,MAAgFH,EAAOK,UAM1F,yBAAKJ,UAAY,aAAY,yCAIrC,OACI,6BACKJ,K,OCYES,E,4MA9BXC,MAAQ,CAEJJ,SAAU,KACVE,KAAM,M,EAGVG,aAAe,SAACC,GACZC,QAAQC,IAAIF,GACZ,EAAKG,SAAL,eACKH,EAAEI,OAAOC,GAAKL,EAAEI,OAAOE,S,EAGhCC,aAAe,SAACP,GACZA,EAAEQ,iBACFP,QAAQC,IAAIF,GACZ,EAAKS,MAAMC,UAAU,EAAKZ,Q,uDAG1B,OACA,6BACI,0BAAMN,UAAU,YAAYmB,SAAUC,KAAKL,cACvC,2BAAOM,KAAK,SAASC,KAAK,IAAIC,IAAI,IAAIC,IAAI,MAAMX,GAAG,WAAWY,YAAY,kBAAkBC,SAAUN,KAAKb,eAC3G,2BAAOc,KAAK,OAAOR,GAAG,OAAOc,UAAU,MAAMF,YAAY,0BAA0BC,SAAUN,KAAKb,eAClG,4BAAQc,KAAK,UAAb,gB,GAxBQO,aC6CTC,E,4MAzCbvB,MAAQ,CAENZ,KAAM,CACJ,CAACQ,SAAU,EAAGE,KAAM,mBACpB,CAACF,SAAU,EAAGE,KAAM,iBACpB,CAACF,SAAU,EAAGE,KAAM,uB,EAIxBc,UAAY,SAACY,GAEXrB,QAAQC,IAAI,EAAKJ,MAAMZ,MACvB,IAAIA,EAAI,sBAAO,EAAKY,MAAMZ,MAAlB,CAAwBoC,IAEhC,EAAKnB,SAAS,CACZjB,KAAKA,K,EAGTC,WAAa,SAACO,GAEZO,QAAQC,IAAIR,GACV,IAAI6B,EAAS,EAAKzB,MAAMZ,KAAKsC,QAAO,SAAAjC,GAClC,OAAOA,EAAOG,WAAaA,KAG7B,EAAKS,SAAS,CACZjB,KAAOqC,K,uDAKX,OACE,yBAAK/B,UAAU,OACb,wBAAIA,UAAU,cAAd,eACE,kBAAC,EAAD,CAAUN,KAAQ0B,KAAKd,MAAMZ,KAAMC,WAAcyB,KAAKzB,aACtD,kBAAC,EAAD,CAASD,KAAQ0B,KAAKd,MAAMZ,KAAMwB,UAAWE,KAAKF,iB,GApC1CU,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.13cf1e41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ListItem = ({list, rmFromList}) => {\r\n\r\n    \r\n    const listOfThings = list.length ? ( \r\n        list.map(things => {\r\n            return(\r\n            <div className=\"list-body\" key={things.priority}>\r\n               <div onClick={() => {rmFromList(things.priority)}}> <b>{things.priority}</b> : {things.memo}</div>\r\n            </div>\r\n            )\r\n        })\r\n\r\n    ) : (\r\n            <div className = \"list-body\"><b>All Done!</b></div>   \r\n         )\r\n    \r\n\r\n    return(\r\n        <div>\r\n            {listOfThings}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default ListItem","import React, {Component} from 'react';\r\n\r\nclass AddToList extends Component {\r\n    state = {\r\n\r\n        priority: null,\r\n        memo: null\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        console.log(e); \r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(e);\r\n        this.props.addToList(this.state);\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <form className=\"list-form\" onSubmit={this.handleSubmit}>\r\n                <input type=\"number\" step=\"1\" min=\"0\" max=\"100\" id=\"priority\" placeholder=\"Priority(0:100)\" onChange={this.handleChange}/>\r\n                <input type=\"text\" id=\"memo\" maxLength=\"280\" placeholder=\"What do you need to do?\" onChange={this.handleChange}/>\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddToList;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport ListItem from './Components/ListItem';\r\nimport AddList from './Components/addToList';\r\n\r\nclass App extends Component{\r\n  state = {\r\n    \r\n    list: [\r\n      {priority: 1, memo: \"Buy face masks.\"},\r\n      {priority: 2, memo: \"Stay at home.\"},\r\n      {priority: 3, memo: \"Learn some React.\"}\r\n    ]\r\n\r\n  }\r\n  addToList = (newItem) => {\r\n\r\n    console.log(this.state.list);\r\n    let list = [...this.state.list, newItem]\r\n    \r\n    this.setState({\r\n      list:list\r\n    })\r\n  }\r\n  rmFromList = (priority) => {\r\n\r\n    console.log(priority);\r\n      let rmList = this.state.list.filter(things => {\r\n        return things.priority !== priority\r\n      });\r\n\r\n      this.setState({\r\n        list : rmList\r\n      })\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"App-header\"> To Do List</h1>\r\n          <ListItem list = {this.state.list} rmFromList = {this.rmFromList}/>\r\n          <AddList list = {this.state.list} addToList={this.addToList}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}